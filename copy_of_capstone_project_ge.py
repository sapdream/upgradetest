# -*- coding: utf-8 -*-
"""Copy of capstone_project_GE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17shBggJYp-lrYlrGpF4CKB_CO4vNPQbq
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

data = pd.read_csv('capstonedata.csv')

visit_date = data['visit_date']
#check visit_ date type

visit_date1=visit_date.astype("string")
#convert to string so that we can split the date and time

new = visit_date1.str.split(" ", n=1, expand=True)
visit_date2= new[0]
#split as new column

visit_date3= pd.to_datetime(visit_date2)
#convert back to date time

data2= data.drop(['visit_date'],axis=1)
#drop the visit_date column #drop object Visit Date

data2.insert(3,"visit_date",visit_date3,True) #insert datetime date
#insert back the date column only

doctor_id = data2['doctor_id']

m1 = doctor_id.ne(doctor_id.shift())
m2 = visit_date.ne(visit_date.shift())
data2['visit_count'] = data2.groupby((m1 | m2).cumsum()).cumcount().add(1).values
#count the number of patients in a day

data3 =data2.groupby(data2['visit_date'],as_index=False).sum('count') #,as_index=False group the count by date
Visdate = data3.visit_date

data3=data3.set_index('visit_date') #set the visit_date as index

import pandas_datareader.data as web
import datetime
import pickle

import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
#display the max amount of columns and rows

import matplotlib.pyplot as plt
import seaborn as sns

sns.set()

plt.ylabel('Amount of patients')
plt.xlabel('date')
plt.xticks(rotation=45)

Vdate = data3.index
VCount= data3.visit_count
plt.plot(Vdate, VCount, )
#plot the date and count into a graph

train = data3[Vdate < pd.to_datetime("2022-11-01", format='%Y-%m-%d')]
test = data3[Vdate > pd.to_datetime("2022-11-01", format='%Y-%m-%d')]

#split the data into training and testing data

plt.plot(train, color='black')
plt.plot(test, color='red')
plt.ylabel('Number of Patients')
plt.xlabel('date')
plt.xticks(rotation=45)
plt.title("Train/Test split for Patient Data")
plt.show()

plt.legend()

from statsmodels.tsa.statespace.sarimax import SARIMAX

import streamlit as st
#do training model
pickle_in = open('rf.pkl', 'rb')
model = pickle.load(pickle_in)

def getprediction(input_date):

  

  #y_pred = model.get_forecast(len(test.index))
  #y_pred_df = y_pred.conf_int(alpha = 0.05)
  #y_pred_df["Predictions"] = model.predict(start = y_pred_df.index[0], end = y_pred_df.index[-1])
  #y_pred_df.index = input_date
  #y_pred_out = y_pred_df["Predictions"]
    

  #return y_pred_out

def main():
  st.title('Clinic Peak Hour Prediction System')
  input_text = st.date_input("Enter Date to find busyness")

  
  if st.button('Predict'):
      results = getprediction(input_text)
      st.markdown(results)

if __name__ == "__main__":
    main()
